@model JourList.Models.TransactionModel

<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jltools.js")" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {

        $.jourlist = {};
        $.jourlist.EnteredTotalCostLast = false;

        $('#Cost').keyup(function (event) { CostKeyUp($('#Cost')[0], event); });
        $('#TotalCost').keyup(function (event) { CostKeyUp($('#TotalCost')[0], event); });

        // Updates one or the other total/peritem costs if one or the other is changed.
        function CostKeyUp(self, event) {

            if (event.target == undefined) { return };

            var qty = nodollar($('#Quantity').val());
            //        var self = ($('#' + blah.id))[0];
            var amt;
            var validation = $("#" + self.id + "Validation");

            // See if the id contains the word total
            var idx = self.id.indexOf("#Total", 0);

            // if it doesn't set our target to the element with the id #Total(caller's id)
            if (idx == -1) {
                var target = $("#Total" + self.id.substring(self.id.indexOf("#")));
                amt = nodollar(self.value) * qty;
                $.jourlist.EnteredTotalCostLast = false;
            }
            // Otherwise, pull everything after the "#Total" in the caller's id and use that as the target
            else {
                target = $("#" + self.id.substring(idx));
                amt = nodollar(self.value) / qty;
                $.jourlist.EnteredTotalCostLast = true;
            };

            // If the input wasn't a number, recompute
            if ((isnumpress(event.which) == true)) {

                // If a shifted number(symbol), parse it out.
                if (event.shiftKey == true) {
                    var c = mapKeyPressToActualCharacter(true, event.which);
                    self.value = (self.value.toUpperCase().replace(c, ''));
                };

                // If everything is "numerable-ed"
                if (!isNaN(nodollar(self.value)) && !isNaN(qty)) {

                    // Update element with total cost
                    target.val(todollar(amt));

                    // If the key press wasn't a decimal
                    if (isdecimal(event.which)) {

                        // reparse the value to keep it to two decimals and $
                        self.value = (todollar(self.value));
                    };
                }
                else {
                    validation.text("Value must be a number");
                };
            }
            // navigation key press
            else if (isnavpress(event.which) == true) {
                return;
            }
            else { // remove whatever character was pressed
                self.value = (todollar(self.value.replace(String.fromCharCode(event.which), "")));
                validation.text("Value must be a number");
            };
        };

        $('#Size').keyup(
                     function (event) {
                         var self = $(this);
                         // If the input wasn't a number, recompute
                         if (isnumpress(event.which) == true) {

                             // If a shifted number(symbol), parse it out.
                             if (event.shiftKey == true) {
                                 var c = mapKeyPressToActualCharacter(true, event.which);
                                 self.val(self.val().toUpperCase().replace(c, ''));
                             };

                             // If everything is "numerable-ed"
                             if (!isNaN(self.val())) {
                                 if (!isNaN($('#Quantity').val())) {
                                     $('#TotalSizeLabel').text(self.val() * $('#Quantity').val());
                                 }
                                 else { self.val(self.val().toUpperCase().replace(String.fromCharCode(event.which), '')) };
                             }
                             else if (isnavpress(event.which) == true) {
                                 return;
                             }
                             else {
                                 self.val(self.val().toUpperCase().replace(String.fromCharCode(event.which), ''));
                             };
                         };
                     }
                 );
        $('#Quantity').keyup(
                     function (event) {
                         var self = $(this);
                         // If the input wasn't a number, recompute
                         if ((isnumpress(event.which) == true)) {

                             // If a shifted number(symbol), parse it out.
                             if (event.shiftKey == true) {
                                 var c = mapKeyPressToActualCharacter(true, event.which);
                                 self.val(self.val().toUpperCase().replace(c, ''));
                             };

                             // If everything is "numerable-ed"
                             if (!isNaN(self.val())) {
                                 if (!isNaN($('#Size').val())) {
                                     $('#TotalSizeLabel').text($('#Size').val() * self.val());
                                 };
                                 if ($.jourlist.EnteredTotalCostLast == false) {
                                     if (!isNaN(nodollar($('#Cost').val()))) {
                                         $('#TotalCost').val(todollar((nodollar($('#Cost').val()) * self.val() * 100) / 100));
                                     };
                                 }
                                 else if ($.jourlist.EnteredTotalCostLast == true) {
                                     if (!isNaN(nodollar($('#TotalCost').val()))) {
                                         $('#Cost').val(todollar((nodollar($('#TotalCost').val()) / self.val() * 100) / 100));
                                     };
                                 };
                             }
                             else { self.val(self.val().toUpperCase().replace(String.fromCharCode(event.which), '')) };
                         }
                         else if (isnavpress(event.which) == true) {
                             return;
                         }
                         else {
                             self.val(self.val().toUpperCase().replace(String.fromCharCode(event.which), ''));
                         };
                     }
                );
    });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('#TotalCost').val(todollar($('#TotalCost').val()));
        $('#Cost').val(todollar($('#Cost').val()));

        $("#AddForm").submit(function (data, event) {
            $('#Cost').val(nodollar($('#Cost').val()));
            $.ajax({
                url: this.action,
                type: this.method,
                data: $('#AddForm').serializeObject(),
                dataType: 'json',
                async: true,
                // on completion assigned the returned list of <label,value> data to the autot complete's data list
                success: function (data) {
                    if (data.Result != "OK") {
                        alert("Add Error:" + data.Message);
                    }
                    else {
                        // Reload the shoppinglist in case it changed
                        //$('#ShoppingListTable').jtable('load');

                        //if ($('#Cost') == undefined || $('#TotalCost') == undefined) { return; }

                        // Reset totalcost calculation for next item
                        if ($('#TotalCost') != undefined) {
                            $('#TotalCost').val(todollar("0"));
                        };

                        // Write out the next item
                        $.each(data.Records.NextItem, function (key, value) {
                            $('[name=' + key + ']', '#AddForm').val(value);
                        });

                        // Add a dollar sign to the cost
                        //                        $('#Cost').val("$" + $('#Cost').val());
                        if ($('#Cost') != undefined) {
                            $('#Cost').val(todollar($('#Cost').val()));
                        };

                        $('#TotalSizeLabel').text($('#Quantity').val() * $('#Size').val());
                        // Reload the transaction table
                        $('#TransactionTable').jtable('addRecord', {
                            record: data.Records.Transaction,
                            clientOnly: true
                        });

                        // Reload the shopping or inventory list since it probably changed.
                        if ($('#InventoryTable') != undefined) {
                            //Load activity list from server
                            $('#InventoryTable').jtable('load');
                        };

                        if ($('#ShoppingListTable') != undefined) {
                            //Load activity list from server
                            $('#ShoppingListTable').jtable('load');
                        };

                        $('#SearchBox').val(data.Records.NextItem.Description);
                    }
                },
                error:
                    function (event, data) {
                        alert(data.Message);
                    }
            });

            return false;
        });

    });
</script>
<!--Search Scripts-->
<script type ="text/javascript">
    $(document).ready(function () {
        // When a key is pressed in the search box we want to get a list of options for them to choose from
        $('input[name=SearchBox]').keypress(
             function () {
                 $.ajax({
                     url: '/Inventory/SearchInventory',
                     type: 'POST',
                     dataType: 'json',
                     data: 'term=' + $("#SearchBox").val(),
                     async: true,
                     // on completion assigned the returned list of <label,value> data to the autot complete's data list
                     success: function (data) { $('#SearchBox').autocomplete({ source: data }); },
                     error: function () { alert("Error Searching"); }
                 })
             }
         );

        $("#SearchBox").autocomplete({
            select: function (event, ui) {
                // Cancels the default action which would normally put the item's ID into the searchbox.
                event.preventDefault();
                // Call the server and grab the item's information
                $.ajax({
                    url: '/Inventory/NewTransaction',
                    type: 'POST',
                    dataType: 'json',
                    data: {'InvId': ui.item.value, "ActionId" : @Model.ActionId},
                    async: true,
                    success:
                            function (data) {
                                if (data.Result != "OK") {
                                    alert("Add Error:" + data.Message);
                                }
                                else {
                                    // Write out the next item
                                    $.each(data.Records, function (key, value) {
                                        $('[name=' + key + ']', '#AddForm').val(value);
                                    });
                                };
                                $('#Cost').val(todollar($('#Cost').val()));
                            },
                    error: function () { alert("Error retrieving item by id."); }
                });
                // Update the search box with the item's actual description, not the search term
                $('#SearchBox').val(ui.item.label);
            }
        });
    });
</script>
<div id="TransactionPanel">
@using (Html.BeginForm("Transact","Inventory",FormMethod.Post,new{ id = "AddForm"})) {
    @Html.ValidationSummary(true)
    <fieldset style="width: 300px; background-color: Yellow;">
        <legend>@Html.TextBoxFor(model => model.Description,new{ style="border: 0px; background-color: Green;", @readonly="true" })</legend>

        <div id="ItemDiv">
                @Html.HiddenFor(model => model.InvId)
                @Html.HiddenFor(model => model.TransId)
                @Html.HiddenFor(model => model.ActionId)

            <table style="width: 280px; border: none;">
                <tr>
                    <td>
                        <div class="editor-label" style="float: left; width: 35px;">@Html.LabelFor(model => model.Size)</div>
                    </td>
                    <td>
                        <div class="editor-field" style="float: right;">
                            <span >@Html.TextBoxFor(model => model.Size, new { style = "width:100px;" })</span>
                            @Html.ValidationMessageFor(model => model.Size)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field" style="">
                        <span style="float: left;">@Html.DropDownListFor(model => model.sUnitId, Model.UnitOptions, new { style = "width:115px;margin: 5px 5px 5px 5px;" })</span>
                        @Html.ValidationMessageFor(model => model.sUnitId)
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>X
                    </td>
                    <td>                
                        <div class="editor-field" style="float: left;">
                            <span style="">@Html.TextBoxFor(model => model.Quantity, new { style = "width:100px;" })</span>
                            @Html.ValidationMessageFor(model => model.Quantity)
                        </div>
                    </td>
                </tr>            
                <tr>
                    <td>Total:
                    </td>
                    <td>
                        <div class="editor-field" style="">
                            <span style="float: left; margin-left: 35px;"><label id="TotalSizeLabel" style="width:100px;" ></label></span>
                        </div>
                    </td>
                    <td>
                        <span style="float: left; margin-left: 35px;"><label id="QuantityLabel" style="width:115px;" ></label></span>
                    </td>
                </tr>                 
            </table>
            <br />
            <br />
            @if (Model.ActionId == (int)JourList.Models.StockUpdateEnum.ADD)
            {
                <table style="width: 250px; border: none;">
                    <tr>
                        <td>
                            Unit Cost:
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Cost, new { style = "width:115px; text-align:right;", valabel = "CostValidation" })
                                @*@Html.ValidationMessageFor(model => model.Cost)*@
                                <label id="CostValidation"></label>
                            </div>
                        </td>
                        <td>
                            Total Cost:
                            <div class="editor-field" style="float: right; ">
                                <input value="0" type="text" id="TotalCost" style="width:115px; text-align:right;" />
                                <span class="field-validation-valid" id="TotalCostValidation"></span>
                            </div>
                        </td>
                    </tr>
                </table>
            }

        </div>
        
        <p>
            <input id="savebutton" type="image" value="Save" src="@Url.Content("../../Content/CheckMark.png")" style="width:100px; height:100px;"/>
        </p>
    </fieldset>
}
</div>
